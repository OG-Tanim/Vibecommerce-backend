generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id           String       @id @default(uuid())

  name         String

  email        String       @unique

  password     String

  role         Role         @default(BUYER)

  isBanned     Boolean      @default(false)

  createdAt    DateTime     @default(now())

  updatedAt    DateTime     @updatedAt

  products     Product[]    @relation("sellerProducts") // one-to-many relation 

  orders       Order[]      @relation("buyerOrders")

  reviews      Review[]

} 

model Product {

  id                 String        @id @default(uuid())
 
  title              String

  description        String

  price              Float

  discountedPrice    Float?

  discountValidTill  DateTime?

  category           String

  images             String[]

  imageIds           String[]      //image public ids 

  video              String?       //optional field, can be null or undefined 

  videoId            String?       //video public id

  sellerId           String

  createdAt          DateTime      @default(now())
  
  updatedAt          DateTime      @updatedAt

  seller             User          @relation("sellerProducts", fields: [sellerId], references: [id]) //many to one relation

  orderItems         OrderItem[]   @relation("orderedProduct")  // one-to-many relation where one product can be in multiple order items

  reviews            Review[]

}

//order: one per checkout

model Order {

  id                   String          @id @default(uuid())

  buyerId              String

  buyer                User            @relation("buyerOrders", fields: [buyerId], references: [id])

  status               OrderStatus     @default(PENDING)

  paymentMethod        PaymentMethod

  shippingInfo         String

  createdAt            DateTime        @default(now())

  updatedAt            DateTime        @updatedAt

  items                OrderItem[]     @relation("orderItems") //one-to-many relation 

  totalAmount          Float
  
  //BKASH specific     fields

  paymentId            String?         @unique

  transactionId        String?

  paymentStatus        String?

  paymentExecutedAt    DateTime?
}


//orderItem: each item in the cart (many per order)

model OrderItem {

  id            String       @id @default(uuid())

  orderId       String

  productId     String

  quantity      Int 

  price         Float

  order         Order        @relation("orderItems", fields: [orderId], references: [id])

  product       Product      @relation("orderedProduct", fields: [productId], references: [id])
}


model Review {

  id           String      @id @default(uuid())

  rating       Int

  comment      String

  productId    String

  buyerId      String
  
  createdAt    DateTime    @default(now())

  product      Product     @relation(fields: [productId], references: [id])

  buyer        User        @relation(fields: [buyerId], references: [id])

}

enum Role {
  ADMIN
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  PROCESSING
  OUT_FOR_DELIVERY
  COMPLETED 
  CANCELLED
  REJECTED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BKASH
}